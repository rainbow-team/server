<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rainbow.unit.dao.UmineplaceMapper">
  <resultMap id="UmineplaceBaseResultMap" type="com.rainbow.unit.domain.Umineplace">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="umine_id" jdbcType="VARCHAR" property="umineId" />
    <result column="build_year" jdbcType="DATE" property="buildYear" />
    <result column="level_id" jdbcType="VARCHAR" property="levelId" />
    <result column="status_id" jdbcType="VARCHAR" property="statusId" />
    <result column="review_status" jdbcType="VARCHAR" property="reviewStatus" />
    <result column="permit_situation_id" jdbcType="VARCHAR" property="permitSituationId" />
    <result column="have_monitor" jdbcType="INTEGER" property="haveMonitor" />
    <result column="is_import" jdbcType="INTEGER" property="isImport" />
    <result column="creator_id" jdbcType="VARCHAR" property="creatorId" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="modify_id" jdbcType="VARCHAR" property="modifyId" />
    <result column="modify_date" jdbcType="TIMESTAMP" property="modifyDate" />
    <result column="survey" jdbcType="LONGVARCHAR" property="survey" />
    <result column="feature" jdbcType="LONGVARCHAR" property="feature" />
    <result column="capacity" jdbcType="LONGVARCHAR" property="capacity" />
    <result column="design_flood_reproduce" jdbcType="LONGVARCHAR" property="designFloodReproduce" />
    <result column="check_flood_reproduce" jdbcType="LONGVARCHAR" property="checkFloodReproduce" />
    <result column="early_dam_type" jdbcType="LONGVARCHAR" property="earlyDamType" />
    <result column="early_dam_height" jdbcType="LONGVARCHAR" property="earlyDamHeight" />
    <result column="note" jdbcType="LONGVARCHAR" property="note" />
  </resultMap>

  <resultMap id="UmineplaceExtendMap" extends="UmineplaceBaseResultMap" type="com.rainbow.unit.domain.UmineplaceExtend">
    <result column="umineName" jdbcType="VARCHAR" property="umineName" />
    <result column="levelValue" jdbcType="VARCHAR" property="levelValue" />
    <result column="statusValue" jdbcType="VARCHAR" property="statusValue" />
    <result column="reviewStatus" jdbcType="VARCHAR" property="reviewStatus" />
    <result column="permitSituationValue" jdbcType="VARCHAR" property="permitSituationValue" />
  </resultMap>

  <select id="getUminePlaceSumByUmineId" parameterType="java.lang.String" resultType="int">
    select
     ifnull(sum(id),0)
    from unit_umine_place t
    where t.umine_id = #{umineId}
  </select>

  <select id="getUmineplaceList" parameterType="map" resultMap="UmineplaceExtendMap">

    select
     t.*,
     u.name umineName,
     ul.value levelValue,
     us.value statusValue,
     rs.value reviewStatus,
     ps.value permitSituationValue
    from unit_umine_place t
    left join unit_umine u on t.umine_id = u.id
    left join config_umine_place_level ul on t.level_id = ul.id
    left join config_umine_place_status us on t.status_id = us.id
    left join config_review_status rs on t.review_status = rs.id
    left join config_umine_place_permit_situation ps on t.permit_situation_id = ps.id
    where 1=1

    <if test="name != null and name != ''">
      and instr(t.name,#{name})>0
    </if>

    <if test="umineName != null and umineName != ''">
      and instr(u.name,#{umineName})>0
    </if>

    <if test="start_date != null and start_date != ''">
      and t.build_year <![CDATA[  >=  ]]> #{start_date}
    </if>

    <if test="end_date != null and end_date != ''">
      and t.build_year <![CDATA[  <=  ]]> #{end_date}
    </if>

    <if test="levelIds != null">
      and t.level_id in (
      <foreach item="item" index="index" collection="levelIds" separator=",">
        #{item}
      </foreach>
      )
    </if>

    <if test="statusIds != null">
      and t.status_id in (
      <foreach item="item" index="index" collection="statusIds" separator=",">
        #{item}
      </foreach>
      )
    </if>

    <if test="reviewStatusIds != null">
      and t.review_status in (
      <foreach item="item" index="index" collection="reviewStatusIds" separator=",">
        #{item}
      </foreach>
      )
    </if>

    <if test="permitSituationIds != null">
      and t.permit_situation_id in (
      <foreach item="item" index="index" collection="permitSituationIds" separator=",">
        #{item}
      </foreach>
      )
    </if>

    <if test="havemonitor != null and havemonitor != ''">
      and t.have_monitor = #{havemonitor}
    </if>
  </select>

  <select id="getUmineplaceById" parameterType="java.lang.String" resultMap="UmineplaceExtendMap">

    select
     t.*,
     u.name umineName,
     ul.value levelValue,
     us.value statusValue,
     rs.value reviewStatus,
     ps.value permitSituationValue
    from unit_umine_place t
    left join unit_umine u on t.umine_id = u.id
    left join config_umine_place_level ul on t.level_id = ul.id
    left join config_umine_place_status us on t.status_id = us.id
    left join config_review_status rs on t.review_status = rs.id
    left join config_umine_place_permit_situation ps on t.permit_situation_id = ps.id
    where t.id = #{id}

  </select>

  <delete id="deleteUmineplaceById" parameterType="java.lang.String">
    delete from unit_umine_place where id = #{id}
  </delete>

  <!--查询是否存在，每次需要根据进度添加 exists-->
  <select id="getUmineplaceRelationCount" parameterType="java.lang.String" resultType="java.lang.Object">
    select
      t.id
    from unit_umine_place t
    where t.id = #{id}
    and not exists(select 1 from unit_umine_place_improve a where a.umine_place_id = t.id)
    and not exists(select 1 from permit_umine_place b where b.umine_place_id = t.id)
    and not exists(select 1 from check_umine_place c where c.umine_place_id = t.id)
    and not exists(select 1 from security_umine_place d where d.umine_place_id = t.id)
    and not exists(select 1 from security_accident e where e.umine_place_id = t.id)
  </select>

  <select id="getUmineplaceListByUmineId" parameterType="java.lang.String" resultMap="UmineplaceBaseResultMap">
    select * from unit_umine_place t where t.umine_id = #{umineId}
  </select>

</mapper>