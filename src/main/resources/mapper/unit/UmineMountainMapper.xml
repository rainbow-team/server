<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rainbow.unit.dao.UmineMountainMapper">
  <resultMap id="MountainBaseResultMap" type="com.rainbow.unit.domain.UmineMountain">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="umine_id" jdbcType="VARCHAR" property="umineId" />
    <result column="build_year" jdbcType="DATE" property="buildYear" />
    <result column="status_id" jdbcType="VARCHAR" property="statusId" />
    <result column="record_id" jdbcType="VARCHAR" property="recordId" />
    <result column="accept_id" jdbcType="VARCHAR" property="acceptId" />
    <result column="is_import" jdbcType="INTEGER" property="isImport" />
    <result column="creator_id" jdbcType="VARCHAR" property="creatorId" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="modify_id" jdbcType="VARCHAR" property="modifyId" />
    <result column="modify_date" jdbcType="TIMESTAMP" property="modifyDate" />
    <result column="survey" jdbcType="LONGVARCHAR" property="survey" />
    <result column="danger_firepoint" jdbcType="LONGVARCHAR" property="dangerFirepoint" />
    <result column="water_volumn" jdbcType="LONGVARCHAR" property="waterVolumn" />
    <result column="note" jdbcType="LONGVARCHAR" property="note" />
  </resultMap>


  <resultMap id="MountainExtendMap" type="com.rainbow.unit.domain.UmineMountainExtend" extends="MountainBaseResultMap">
    <result column="umineName" jdbcType="VARCHAR" property="umineName" />
    <result column="statusValue" jdbcType="VARCHAR" property="statusValue" />
    <result column="recordValue" jdbcType="VARCHAR" property="recordValue" />
    <result column="acceptValue" jdbcType="VARCHAR" property="acceptValue" />
  </resultMap>

  <select id="getMountainSumByUmineId" parameterType="java.lang.String" resultType="int">
    select
     ifnull(count(id),0)
    from unit_umine_mountain t
    where t.umine_id = #{umineId}
  </select>

  <select id="getUmineMountainList" resultMap="MountainExtendMap" parameterType="map">
    select
    t.*,
    u.name umineName,
    s.value statusValue,
    r.value recordValue,
    a.value acceptValue
    from unit_umine_mountain t
    left join unit_umine u on t.umine_id = u.id
    left join  config_umine_mountain_status s on t.status_id = s.id
    left join config_umine_mountain_record r on t.record_id = r.id
    left join  config_umine_mountain_accept a on t.accept_id = a.id
    where 1=1
    <if test="name != null and name != ''">
      and instr(t.name,#{name})>0
    </if>

    <if test="umineName != null and umineName != ''">
      and instr(u.name,#{umineName})>0
    </if>


    <if test="build_start_year != null and build_start_year != ''">
      and year(t.build_year)
      <![CDATA[  >=  ]]>
      year(#{build_start_year})
    </if>

    <if test="build_end_year != null and build_end_year != ''">
      and year(t.build_year)
      <![CDATA[  <=  ]]>
      year(#{build_end_year})
    </if>

    <if test="statusIds != null">
      and t.status_id in (
      <foreach item="item" index="index" collection="statusIds" separator=",">
        #{item}
      </foreach>
      )
    </if>

    <if test="recordIds != null">
      and t.record_id in (
      <foreach item="item" index="index" collection="recordIds" separator=",">
        #{item}
      </foreach>
      )
    </if>

    <if test="acceptIds != null">
      and t.accept_id in (
      <foreach item="item" index="index" collection="acceptIds" separator=",">
        #{item}
      </foreach>
      )
    </if>

    <choose>
      <when test="checked != null and checked != ''">
        order by t.modify_date desc
      </when>
      <otherwise>
        order by u.name,t.build_year desc,t.name
      </otherwise>
    </choose>

  </select>

  <select id="getUmineMountainById" parameterType="java.lang.String" resultMap="MountainExtendMap">
    select
      t.*,
    u.name umineName,
    s.value statusValue,
    r.value recordValue,
    a.value acceptValue
    from unit_umine_mountain t
    left join unit_umine u on t.umine_id = u.id
    left join  config_umine_mountain_status s on t.status_id = s.id
    left join config_umine_mountain_record r on t.record_id = r.id
    left join  config_umine_mountain_accept a on t.accept_id = a.id
    where t.id = #{id}
  </select>

  <delete id="deleteUmineMountainById" parameterType="java.lang.String">
    delete from unit_umine_mountain where id = #{id}
  </delete>

  <!--查询是否存在，每次需要根据进度添加 exists-->
  <select id="getUmineMountainRelationCount" parameterType="java.lang.String" resultType="java.lang.Object">
    select
      t.id
    from unit_umine_mountain t
    where t.id = #{id}
    and not exists(select 1 from unit_umine_mountain_improve a where a.umine_mountain_id = t.id)
    and not exists(select 1 from check_umine_mountain b where b.umine_mountain_id = t.id)
  </select>

  <select id="getUminemountainListByUmineId" parameterType="java.lang.String" resultMap="MountainBaseResultMap">
    select * from unit_umine_mountain t where t.umine_id = #{umineId}
  </select>

  <select id="getUminmountainCount" resultType="java.lang.Integer">
    select count(id) from unit_umine_mountain
  </select>
</mapper>