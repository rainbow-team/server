<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rainbow.check.dao.EquipCheckMapper">
  <resultMap id="EquipCheckBaseResultMap" type="com.rainbow.check.domain.EquipCheck">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="equip_depart_id" jdbcType="VARCHAR" property="equipDepartId" />
    <result column="service_id" jdbcType="VARCHAR" property="serviceId" />
    <result column="fac_id" jdbcType="VARCHAR" property="facId" />
    <result column="type_id" jdbcType="VARCHAR" property="typeId" />
    <result column="level_id" jdbcType="VARCHAR" property="levelId" />
    <result column="stage_id" jdbcType="VARCHAR" property="stageId" />
    <result column="check_date" jdbcType="DATE" property="checkDate" />
    <result column="is_import" jdbcType="INTEGER" property="isImport" />
    <result column="creator_id" jdbcType="VARCHAR" property="creatorId" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="modify_id" jdbcType="VARCHAR" property="modifyId" />
    <result column="modify_date" jdbcType="TIMESTAMP" property="modifyDate" />
    <result column="note" jdbcType="LONGVARCHAR" property="note" />
  </resultMap>

  <resultMap id="EquipCheckExtendMap" extends="EquipCheckBaseResultMap" type="com.rainbow.check.domain.EquipCheckExtend">
    <result column="equipDepartName" jdbcType="VARCHAR" property="equipDepartName" />
    <result column="serviceDepartName" jdbcType="VARCHAR" property="serviceDepartName" />
    <result column="facName" jdbcType="VARCHAR" property="facName" />
    <result column="typeValue" jdbcType="VARCHAR" property="typeValue" />
    <result column="levelValue" jdbcType="VARCHAR" property="levelValue" />
    <result column="stageValue" jdbcType="VARCHAR" property="stageValue" />
  </resultMap>


  <select id="getEquipCheckList" parameterType="map" resultMap="EquipCheckExtendMap">

    select
     t.*,
    ed.name equipDepartName,
    sd.name serviceDepartName,
    f.name facName,
    ty.value typeValue,
    le.value levelValue,
    st.value stageValue
    from check_equip t
    left join unit_equip_depart ed on t.equip_depart_id = ed.id
    left join unit_service_depart sd on t.service_id = sd.id
    left join unit_fac f on t.fac_id = f.id
    left join config_equip_type ty on t.type_id = ty.id
    left join config_equip_level le on t.level_id = le.id
    left join config_equip_check_stage st on t.stage_id = st.id
    where 1=1

    <if test="name != null and name != ''">
      and instr(t.name,#{name})>0
    </if>

    <if test="equipDepartName != null and equipDepartName != ''">
      and instr(ed.name,#{equipDepartName})>0
    </if>

    <if test="serviceDepartName != null and serviceDepartName != ''">
      and instr(sd.name,#{serviceDepartName})>0
    </if>

    <if test="facName != null and facName != ''">
      and instr(f.name,#{facName})>0
    </if>

    <if test="typeIds != null">
      and t.type_id in (
      <foreach item="item" index="index" collection="typeIds" separator=",">
        #{item}
      </foreach>
      )
    </if>

    <if test="levelIds != null">
      and t.level_id in (
      <foreach item="item" index="index" collection="levelIds" separator=",">
        #{item}
      </foreach>
      )
    </if>

    <if test="stageIds != null">
      and t.stage_id in (
      <foreach item="item" index="index" collection="stageIds" separator=",">
        #{item}
      </foreach>
      )
    </if>

    <if test="equipdepartId != null and equipdepartId != ''">
      and t.equip_depart_id = #{equipdepartId}
    </if>

    <choose>
      <when test="checked != null and checked != ''">
        order by t.modify_date desc
      </when>
      <otherwise>
        order by CONVERT(ed.name using gbk) ,CONVERT(sd.name using gbk),CONVERT(f.name using gbk),CONVERT(t.name using gbk),CONVERT(st.value using gbk)
      </otherwise>
    </choose>

  </select>



  <select id="getEquipCheckById" parameterType="java.lang.String" resultMap="EquipCheckExtendMap">

    select
      t.*,
    ed.name equipDepartName,
    sd.name serviceDepartName,
    f.name facName,
    ty.value typeValue,
    le.value levelValue,
    st.value stageValue
    from check_equip t
    left join unit_equip_depart ed on t.equip_depart_id = ed.id
    left join unit_service_depart sd on t.service_id = sd.id
    left join unit_fac f on t.fac_id = f.id
    left join config_equip_type ty on t.type_id = ty.id
    left join config_equip_level le on t.level_id = le.id
    left join config_equip_check_stage st on t.stage_id = st.id
    where t.id = #{id}

  </select>

  <delete id="deleteEquipCheckById" parameterType="java.lang.String">
    delete from check_equip where id = #{id}
  </delete>

  <!--查询是否存在，每次需要根据进度添加 exists-->
  <select id="getEquipCheckRelationCount" parameterType="java.lang.String" resultType="java.lang.Object">
    select
     t.id
    from check_equip t
    where t.id = #{id}
    and not exists(select 1 from check_equip_file a where a.check_equip_id = t.id)
  </select>
</mapper>